<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Service Configuration

const int MAX_MOTES = 15;
const int MAX_LINKS = 2;
typedef int[2, MAX_MOTES] m_id;
typedef int[1, MAX_MOTES] d_id;
const int routerId = 1;
const int KEEP_ALIVE_TIME = 1;
const int MAX_SLOTS = 40;
typedef struct {
    int destination;
    int distribution;
    int power;
    int packetLoss;
    int latency;
    int SNR;
    int SF; 
}Link;

typedef struct {
    int moteId;
    int load;
    int battery;
    int numParents;
    int dataProbability;
    int queue;
    Link links[MAX_LINKS];
}Mote;

double	powerConsumptionRate[16]	= { 20.2, 21.2, 22.3, 23.7, 24.7, 26.1, 27.5, 28.8, 30.0,
			31.2, 32.4, 33.7, 35.1, 36.5, 38.0, 38.9 };

typedef int [7, 12]SFRange;
double SFTimes[SFRange] = {0.128, 0.258, 0.458, 0.858, 1.158, 1.58};
const int CoulombUnit = 1000;
const int receptionTime = 4;
const double receptionCost = 14.2;

typedef struct {
//    int power;
//    int packetLoss;
    Mote motes[m_id];
}LoRA;

const Link EMPTY_LINK = {0,0,0,0,0,0,0};
//&lt;LORA&gt;
LoRA loRA ={{{2, 10, 11875, 1, 85,{{4, 100, 15, 10, 0, -2, 11},EMPTY_LINK}},{3, 10, 11875, 1, 100,{{1, 100, 1, 0, 0, 4, 11},EMPTY_LINK}},{4, 10, 11875, 1, 100,{{1, 100, 1, 0, 0, 2, 11},EMPTY_LINK}},{5, 10, 11877, 1, 100,{{9, 100, 1, 0, 0, 0, 11},EMPTY_LINK}},{6, 10, 11877, 1, 100,{{4, 100, 15, 17, 0, -3, 11},EMPTY_LINK}},{7, 10, 11873, 2, 100,{{2, 0, 1, 0, 0, 6, 11},{3, 100, 1, 0, 0, 2, 11}}},{8, 10, 11879, 1, 85,{{1, 100, 15, 0, 0, 0, 11},EMPTY_LINK}},{9, 10, 11876, 1, 100,{{1, 100, 1, 0, 0, 5, 11},EMPTY_LINK}},{10, 10, 11880, 2, 0,{{6, 50, 1, 0, 0, 1, 11},{5, 100, 15, 0, 0, 2, 11}}},{11, 10, 11877, 1, 100,{{7, 100, 15, 0, 0, 3, 11},EMPTY_LINK}},{12, 10, 11875, 2, 100,{{7, 50, 1, 0, 0, 2, 11},{3, 100, 15, 17, 0, -3, 11}}},{13, 10, 11880, 1, 73,{{11, 100, 15, 12, 0, -2, 11},EMPTY_LINK}},{14, 10, 11879, 1, 85,{{12, 100, 1, 0, 0, 2, 11},EMPTY_LINK}},{15, 10, 11879, 1, 100,{{12, 100, 1, 0, 0, 1, 11},EMPTY_LINK}}}};
//&lt;/LORA&gt;
//&lt;TOPOLOGY&gt;
int topology[d_id] = {8,10,13,14,15,5,6,11,12,9,7,2,3,4,1};
//int topology[6] = {10,5,6,9,4,1};
//int topology[d_id] = {13,14,15,11,12,7,2,3,4, 8,5,9,1,1,1};
//&lt;/TOPOLOGY&gt;
broadcast chan data[d_id], turn[d_id];
broadcast chan done;
double batteryUsage;

typedef struct {
    int source;
    int number;
    int run;
}Packet;

int run;
const int MAX_LOAD = 10;
const int MAX_QUEUE = 60;
const int MAX_TRANSFER = 40;

typedef struct{
    Packet packets[MAX_QUEUE];
    int size; 
}Queue;

typedef struct{
    Packet packets[MAX_TRANSFER];
    int size;
}List;

List numPackets;

void addtoQueue(Queue &amp;queue, List &amp;list){
    int i=0;
    for(i = 0; i &lt; list.size; i++){
        if (queue.size &lt; MAX_QUEUE)
            queue.packets[queue.size++] = list.packets[i];
    }
}

void addtoList(List &amp;list, Queue &amp;queue, int size){
    int i=0;
    for(i = 0; i &lt; size; i++){
            list.packets[list.size++] = queue.packets[i];
    }
}</declaration>
	<template>
		<name>MoteAutomata</name>
		<parameter>m_id moteId</parameter>
		<declaration>clock t;
int parent = 0;
double receivedData;
Link link;
int numParents;
//int queue;
Queue queue;
List packets;
//int totalPackets;
bool duplication = false;
Mote mote;
bool hasLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (loRA.motes[moteId].links[i] != EMPTY_LINK){
            return true;
        }
    }
    return false;
}

void calcLoad(Link link, List &amp;p){
    // if there is no next link then current load should be used for this link
    numPackets.size =0;
    if (numParents ==1 || parent +1 == numParents|| duplication){
        int i;
        for(i = 0; i &lt; packets.size; i++){
            numPackets.packets[i] = packets.packets[i];
            numPackets.size++;
        }
    }else{
        int load = packets.size * link.distribution/100;
        int i, j = 0;
        for(i = 0; i &lt; load; i++){
            numPackets.packets[i] = packets.packets[i];
            numPackets.size++;
        }
        for(i = load + 1; i &lt; packets.size; i++){
            packets.packets[j++] = packets.packets[i];
        }
        packets.size -= load;
    }
}

Link selectNextLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (loRA.motes[moteId].links[i] != EMPTY_LINK){
            parent = i;
            return loRA.motes[moteId].links[i];
        }
    }
    return EMPTY_LINK;
}

void initialize(){
    //queue += loRA.motes[moteId].load;
    mote = loRA.motes[moteId];
    parent = -1;
    numParents = mote.numParents;
    packets.size = 0;
    if (numParents == 2){
        duplication = mote.links[0].distribution == 100 &amp;&amp; mote.links[1].distribution == 100;
    }
}

double calcRecvBatteryUsage(List &amp;numPackets){
    return  (numPackets.size * receptionTime * (receptionCost/CoulombUnit));
}

double calcSendBatteryUsage(List &amp;numPackets){
    return  (numPackets.size * (SFTimes[link.SF] * (powerConsumptionRate[link.power] / CoulombUnit)));
}

bool queueHasPacket(Packet &amp;packet){
    int i;
    bool found = false;
    while(i &lt; queue.size &amp;&amp; found != true){
        found = queue.packets[i++] == packet;
    }
    return found;
}

void receivePackets(List &amp;list){
    int i;
    Packet packet;
    for(i = 0; i &lt; list.size; i++){
        if (queue.size &lt; MAX_QUEUE){
            packet = list.packets[i];
            if (!queueHasPacket(packet))
                queue.packets[queue.size++] = list.packets[i];
        }
    }
    //list.size = 0;
}

//void removePackets(int numPackets){
//    totalPackets -= numPackets;
//}

void selectQueuedPackets(int totalPackets){
    // first clear the queue
    int i, j = 0;
    Queue q;
    for (i = 0; i &lt; queue.size; i++){
        if (run - queue.packets[i].run &lt;= KEEP_ALIVE_TIME){
            q.packets[j++] = queue.packets[i];
        }
    }
    q.size = j;
    queue = q;
    
    j = 0;
    // select packets to send
    if (queue.size &lt;=totalPackets){
        addtoList(packets, queue, queue.size);
        queue.size =0;
    }
    else{
        addtoList(packets, queue, totalPackets);
        // move packets up
        for(i = totalPackets; i &lt; queue.size; i++)
            queue.packets[j++]=queue.packets[i];
        queue.size = j;
    }
}

void selectMotePackets(){
    int i;
    for(i = 0;i&lt; loRA.motes[moteId].load; i++){
        Packet packet = {moteId, i+1, run};
        packets.packets[packets.size++] = packet;
    }
}

int getMoteActivationPr(){
    return loRA.motes[moteId].dataProbability;
}

void resetQueue(){
    //queue.size =0;
    packets.size = 0;
}</declaration>
		<location id="id0" x="-170" y="238">
			<name x="-153" y="229">MoteActive</name>
			<committed/>
		</location>
		<location id="id1" x="136" y="238">
			<committed/>
		</location>
		<location id="id2" x="136" y="340">
			<name x="85" y="357">ReceivePackets</name>
			<committed/>
		</location>
		<location id="id3" x="-42" y="119">
			<name x="-85" y="8">CalculateLoad</name>
			<committed/>
		</location>
		<location id="id4" x="417" y="119">
			<urgent/>
		</location>
		<location id="id5" x="178" y="119">
			<name x="136" y="8">SendPackets</name>
			<committed/>
		</location>
		<location id="id6" x="-229" y="119">
			<name x="-246" y="8">ForEachLink</name>
			<committed/>
		</location>
		<location id="id7" x="272" y="238">
			<name x="262" y="204">Idle</name>
		</location>
		<branchpoint id="id8" x="68" y="238">
		</branchpoint>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<nail x="-229" y="238"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-170" y="297">selectMotePackets(),
selectQueuedPackets(
MAX_SLOTS-mote.load)</label>
			<label kind="probability" x="-170" y="280">getMoteActivationPr()</label>
			<nail x="68" y="272"/>
			<nail x="-170" y="272"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-170" y="178">selectQueuedPackets(MAX_SLOTS)</label>
			<label kind="probability" x="-170" y="161">100-getMoteActivationPr()</label>
			<nail x="68" y="204"/>
			<nail x="-170" y="204"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="153" y="195">turn[moteId]?</label>
			<label kind="assignment" x="153" y="212">initialize()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="85" y="289">data[moteId]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="assignment" x="-25" y="93">calcLoad(link, numPackets)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id7"/>
			<label kind="assignment" x="178" y="314">receivePackets(numPackets)</label>
			<nail x="408" y="340"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="340" y="212">!hasLink()</label>
			<label kind="synchronisation" x="340" y="195">done!</label>
			<nail x="417" y="238"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="340" y="42">hasLink()</label>
			<nail x="417" y="34"/>
			<nail x="-229" y="34"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="212" y="93">data[link.destination]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="assignment" x="-212" y="93">link=selectNextLink()</label>
		</transition>
	</template>
	<template>
		<name>Gateway</name>
		<declaration>int period = -1;
int totalPackets;
//double avgBatteryUsage;
double avgLatency;

double totalTime;
double totalLatency;
/*
double getBatteryUsage(){
    return batteryUsage + size * receptionTime * (receptionCost/CoulombUnit);
}*/
/*
bool packetExists(Packet &amp;packet){
    bool found = false;
    int i;
    while(i &lt; size &amp;&amp; found == false){
        found = packets[i++] == packet;
    }
    return found;
}
*/
void receivePackets(List &amp;recvPackets){
    int i;
    Packet packet;
    for (i = 0; i &lt; recvPackets.size; i++){
        packet = recvPackets.packets[i];
        totalTime = totalTime + (run - packet.run);
        totalPackets++;
    }
    recvPackets.size = 0;
}
/*
void resetQueue(){
    size = 0;
}
*/

void resetValues(){
    totalTime = 0;
    totalPackets = 0;
}
</declaration>
		<location id="id9" x="-136" y="0">
			<committed/>
		</location>
		<location id="id10" x="0" y="0">
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-136" y="76">done!</label>
			<label kind="assignment" x="-144" y="93">totalLatency=totalLatency+totalTime/totalPackets,
avgLatency= (period == 0 ? 0.0 : totalLatency/period),
resetValues()</label>
			<nail x="-136" y="68"/>
			<nail x="-34" y="68"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-136" y="-110">turn[routerId]?</label>
			<label kind="assignment" x="-136" y="-93">period++</label>
			<nail x="-34" y="-68"/>
			<nail x="-136" y="-68"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="8" y="-110">data[routerId]?</label>
			<label kind="assignment" x="8" y="-93">receivePackets(numPackets)</label>
			<nail x="34" y="-68"/>
			<nail x="136" y="-68"/>
			<nail x="136" y="68"/>
			<nail x="34" y="68"/>
		</transition>
	</template>
	<template>
		<name>Topology</name>
		<declaration>clock t;
int mId;
int moteId;

void initialize(){
    mId = 1;
}

bool hasTurn(){
    return mId &lt; MAX_MOTES + 1;
}

int nextTurn(){
   return topology[mId++]; 
}</declaration>
		<location id="id11" x="204" y="-34">
			<committed/>
		</location>
		<location id="id12" x="68" y="-34">
		</location>
		<location id="id13" x="-68" y="-34">
			<committed/>
		</location>
		<location id="id14" x="-238" y="-34">
			<committed/>
		</location>
		<location id="id15" x="-238" y="68">
			<label kind="invariant" x="-229" y="76">t&lt;=1</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="guard" x="119" y="25">!hasTurn()</label>
			<label kind="assignment" x="119" y="42">t=0</label>
			<nail x="204" y="68"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="127" y="-127">hasTurn()</label>
			<nail x="204" y="-136"/>
			<nail x="-238" y="-136"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="93" y="-59">done?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-51" y="-59">turn[moteId]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-221" y="-76">hasTurn()</label>
			<label kind="assignment" x="-221" y="-59">moteId = nextTurn()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-229" y="0">t &gt;=1</label>
			<label kind="assignment" x="-229" y="17">initialize(),
run++</label>
		</transition>
	</template>
	<system>system //LoRANetwork;
MoteAutomata, Gateway,Topology;</system>
	<queries>
		<query>
			<formula>simulate 10[&lt;=1000]{Gateway.avgLatency}
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
