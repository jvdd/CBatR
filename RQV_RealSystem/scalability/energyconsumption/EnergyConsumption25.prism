mdp

const double Mote2TrafficLoadProb = 0.5;
const double Mote3TrafficLoadProb = 1.0;
const double Mote4TrafficLoadProb = 0.5;
const double Mote5TrafficLoadProb = 0.5;
const double Mote6TrafficLoadProb = 0.5;
const double Mote7TrafficLoadProb = 0.5;
const double Mote8TrafficLoadProb = 1.0;
const double Mote9TrafficLoadProb = 1.0;
const double Mote10TrafficLoadProb = 1.0;
const double Mote11TrafficLoadProb =0.5;
const double Mote12TrafficLoadProb = 0.5;
const double Mote13TrafficLoadProb = 0.5;
const double Mote14TrafficLoadProb = 1.0;
const double Mote15TrafficLoadProb = 1.0;
const double Mote16TrafficLoadProb =1.0;
const double Mote17TrafficLoadProb = 1.0;
const double Mote18TrafficLoadProb = 1.0;
const double Mote19TrafficLoadProb = 1.0;
const double Mote20TrafficLoadProb = 1.0;
const double Mote21TrafficLoadProb = 1.0;
const double Mote22TrafficLoadProb =1.0;
const double Mote23TrafficLoadProb = 0.5;
const double Mote24TrafficLoadProb = 1.0;
const double Mote25TrafficLoadProb = 1.0;


const int link24Power = 15;
const int link31Power = 15;
const int link41Power = 15;
const int link59Power = 15;
const int link64Power = 15;
const int link72Power = 15;
const int link73Power = 15;
const int link81Power = 15;
const int link91Power = 15;
const int link105Power = 15;
const int link106Power = 15;
const int link117Power = 15;
const int link127Power = 15;
const int link123Power = 15;
const int link1311Power = 15;
const int link1412Power = 15;
const int link1512Power = 15;
const int link166Power = 15;
const int link1718Power = 15;
const int link1716Power = 15;
const int link1810Power = 15;
const int link1910Power = 15;
const int link208Power = 15;
const int link2120Power = 15;
const int link2221Power=15;
const int link2324Power=15;
const int link2321Power=15;
const int link2425Power = 15;
const int link259Power = 15;

const int df106 = 50;
const int df105 = 50;
const int df72 = 50;
const int df73 = 50;
const int df127 = 50;
const int df123 = 50;
const int df1718 = 50;
const int df1716 = 50;
const int df2324 = 50;
const int df2321 = 50;



const int MoteLoad = 10;
const int MAX_QUEUE = 60;
const int MAX_SLOTS = 40;

// Power Consumption rates
const double PCR0 = 20.2;
const double PCR1 = 21.2;
const double PCR2 = 22.3;
const double PCR3 = 23.7;
const double PCR4 = 24.7;
const double PCR5 = 26.1;
const double PCR6 = 27.5;
const double PCR7 = 28.8;
const double PCR8 = 30.0;
const double PCR9 = 31.2;
const double PCR10 = 32.4;
const double PCR11 = 33.7;
const double PCR12 = 35.1;
const double PCR13 = 36.5;
const double PCR14 = 38.0;
const double PCR15 = 38.9;

const double SFTime = 1.158;
const double CoulombUnit = 1000.0;
const int receptionTime = 4;
const double receptionCost = 14.2;
global power:[0..15];
//global reciever : [0..15];
global packets: [0..40] init 0;
//////////////////////////////////////////////////////////////////

module Gateway
periodDone:bool;
statusg:[0..1] init 0;

[sendData31] turn = 3 -> (statusg'=1);
[sendData41] turn = 4 -> (statusg'=1);
[sendData81] turn = 8 -> (statusg'=1);
[sendData91] turn = 9 -> (statusg'=1);

[turn] turn=1  & periodDone = false -> (periodDone'=true);
[turnDone] periodDone = true -> (periodDone'=false);

endmodule
//////////////////////////////////////////////////////////////////

label "EnergyConsumption" = periodDone = true;
label "Packets" = periodDone = true;

module Mote2
status2:[0..5] init 0;
queue2:[0..MAX_QUEUE] init 0;

[turn2] status2 = 0 -> Mote2TrafficLoadProb:(status2'=1) + 1-Mote2TrafficLoadProb:(status2'=2);

[] status2 = 1 & queue2 <= MAX_SLOTS-MoteLoad -> (packets'=queue2 + MoteLoad) & (status2'=3) & (queue2'=0);
[] status2 = 1 & queue2 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status2'=3) & (queue2'=queue2-(MAX_SLOTS-MoteLoad));

[] status2 = 2 & queue2 <= MAX_SLOTS -> (packets'=queue2) & (status2'=3) & (queue2'=0);
[] status2 = 2 & queue2 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status2'=3) & (queue2'=queue2-MAX_SLOTS);

[] status2 = 3 -> (power'=link24Power) &(status2'=4);

[sendData24] status2 = 4 -> (status2'=5);
[done2] status2 = 5 -> (status2'=0);
// receiving part
[sendData72] (queue2 + packets <= MAX_QUEUE) -> (queue2' = queue2 + packets);
[sendData72] (queue2 + packets > MAX_QUEUE) -> (queue2' = MAX_QUEUE);
endmodule

module Mote3
status3:[0..5] init 0;
queue3:[0..MAX_QUEUE] init 0;

[turn3] status3 = 0 -> Mote3TrafficLoadProb:(status3'=1) + 1-Mote3TrafficLoadProb:(status3'=2);

//[] status3 = 1 -> (packets'=queue3 + 10) & (status3'=3);
//[] status3 = 2 -> (packets'=queue3) & (status3'=3);

[] status3 = 1 & queue3 <= MAX_SLOTS-MoteLoad -> (packets'=queue3 + MoteLoad) & (status3'=3) & (queue3'=0);
[] status3 = 1 & queue3 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status3'=3) & (queue3'=queue3-(MAX_SLOTS-MoteLoad));

[] status3 = 2 & queue3 <= MAX_SLOTS -> (packets'=queue3) & (status3'=3) & (queue3'=0);
[] status3 = 2 & queue3 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status3'=3) & (queue3'=queue3-MAX_SLOTS);

[] status3 = 3 -> (power'=link31Power) &(status3'=4);

[sendData31] status3 = 4 -> (status3'=5);
[done3] status3 = 5 -> (status3'=0);
// receiving part
[sendData73] (queue3 + packets <= MAX_QUEUE) -> (queue3' = queue3 + packets);
[sendData73] (queue3 + packets > MAX_QUEUE) -> (queue3' = MAX_QUEUE);
[sendData123] (queue3 + packets <= MAX_QUEUE) -> (queue3' = queue3 + packets);
[sendData123] (queue3 + packets > MAX_QUEUE) -> (queue3' = MAX_QUEUE);
endmodule

module Mote4
status4:[0..5] init 0;
queue4:[0..MAX_QUEUE] init 0;

[turn4] status4 = 0 -> Mote4TrafficLoadProb:(status4'=1) + 1-Mote4TrafficLoadProb:(status4'=2);

//[] status4 = 1 -> (packets'=queue4 + 10) & (status4'=3);
//[] status4 = 2 -> (packets'=queue4) & (status4'=3);

[] status4 = 1 & queue4 <= MAX_SLOTS-MoteLoad -> (packets'=queue4 + MoteLoad) & (status4'=3) & (queue4'=0);
[] status4 = 1 & queue4 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status4'=3) & (queue4'=queue4-(MAX_SLOTS-MoteLoad));
[] status4 = 2 & queue4 <= MAX_SLOTS -> (packets'=queue4) & (status4'=3) & (queue4'=0);
[] status4 = 2 & queue4 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status4'=3) & (queue4'=queue4-MAX_SLOTS);

[] status4 = 3 -> (power'=link41Power) &(status4'=4);

[sendData41] status4 = 4 -> (status4'=5);
[done4] status4 = 5 -> (status4'=0);
// receiving part
[sendData64] (queue4 + packets <= MAX_QUEUE) -> (queue4' = queue4 + packets);
[sendData64] (queue4 + packets > MAX_QUEUE) -> (queue4' = MAX_QUEUE);
[sendData24] (queue4 + packets <= MAX_QUEUE) -> (queue4' = queue4 + packets);
[sendData24] (queue4 + packets > MAX_QUEUE) -> (queue4' = MAX_QUEUE);
endmodule
//////////////////////////////////////////////////////////////////

module Mote5
status5:[0..5] init 0;
queue5:[0..MAX_QUEUE] init 0;

[turn5] status4 = 0 -> Mote5TrafficLoadProb:(status5'=1) + 1-Mote5TrafficLoadProb:(status5'=2);

//[] status5 = 1 -> (packets'=queue5 + 10) & (status5'=3);
//[] status5 = 2 -> (packets'=queue5) & (status5'=3);
[] status5 = 1 & queue5 <= MAX_SLOTS-MoteLoad -> (packets'=queue5 + MoteLoad) & (status5'=3) & (queue5'=0);
[] status5 = 1 & queue5 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status5'=3) & (queue5'=queue5-(MAX_SLOTS-MoteLoad));
[] status5 = 2 & queue5 <= MAX_SLOTS -> (packets'=queue5) & (status5'=3) & (queue5'=0);
[] status5 = 2 & queue5 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status5'=3) & (queue5'=queue5-MAX_SLOTS);

[] status5 = 3 -> (power'=link59Power) &(status5'=4);

[sendData59] status5 = 4 -> (status5'=5);
[done5] status5 = 5 -> (status5'=0);
// receiving part
[sendData105] (queue5 + packets <= MAX_QUEUE) -> (queue5' = queue5 + packets);
[sendData105] (queue5 + packets > MAX_QUEUE) -> (queue5' = MAX_QUEUE);
endmodule
//////////////////////////////////////////////////////////////////

module Mote6
status6:[0..5] init 0;
queue6:[0..MAX_QUEUE] init 0;

[turn6] status6 = 0 -> Mote6TrafficLoadProb:(status6'=1) + 1-Mote6TrafficLoadProb:(status6'=2);

//[] status6 = 1 -> (packets'=queue6 + 10) & (status6'=3);
//[] status6 = 2 -> (packets'=queue6) & (status6'=3);
[] status6 = 1 & queue6 <= MAX_SLOTS-MoteLoad -> (packets'=queue6 + MoteLoad) & (status6'=3) & (queue6'=0);
[] status6 = 1 & queue6 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status6'=3) & (queue6'=queue6-(MAX_SLOTS-MoteLoad));
[] status6 = 2 & queue6 <= MAX_SLOTS -> (packets'=queue6) & (status6'=3) & (queue6'=0);
[] status6 = 2 & queue6 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status6'=3) & (queue6'=queue6-MAX_SLOTS);

[] status6 = 3 -> (power'=link64Power) &(status6'=4);

[sendData64] status6 = 4 -> (status6'=5); 
[done6] status6 = 5 -> (status6'=0);
// receiving part
[sendData106] (queue6 + packets <= MAX_QUEUE) -> (queue6' = queue6 + packets);
[sendData106] (queue6 + packets > MAX_QUEUE) -> (queue6' = MAX_QUEUE);
[sendData166] (queue6 + packets <= MAX_QUEUE) -> (queue6' = queue6 + packets);
[sendData166] (queue6 + packets > MAX_QUEUE) -> (queue6' = MAX_QUEUE);
endmodule

module Mote7
status7:[0..7] init 0;
queue7:[0..MAX_QUEUE] init 0;
totalPackets7:[0..40];

[turn7] status7 = 0 -> Mote7TrafficLoadProb:(status7'=1) + 1-Mote7TrafficLoadProb:(status7'=2);

//[] status7 = 1 -> (totalPackets7'=queue7 + 10) & (status7'=3);
//[] status7 = 2 -> (totalPackets7'=queue7) & (status7'=3);
[] status7 = 1 & queue7 <= MAX_SLOTS-MoteLoad -> (totalPackets7'=queue7 + MoteLoad) & (status7'=3) & (queue7'=0);
[] status7 = 1 & queue7 > MAX_SLOTS-MoteLoad -> (totalPackets7'=MAX_SLOTS) & (status7'=3) & (queue7'=queue7-(MAX_SLOTS-MoteLoad));
[] status7 = 2 & queue7 <= MAX_SLOTS -> (totalPackets7'=queue7) & (status7'=3) & (queue7'=0);
[] status7 = 2 & queue7 > MAX_SLOTS -> (totalPackets7'=MAX_SLOTS) & (status7'=3) & (queue7'=queue7-MAX_SLOTS);

[] status7 = 3 -> (power'=link72Power) &(status7'=4) & (packets'= floor(totalPackets7*df72/100));
[sendData72] status7 = 4 -> (status7'=5);

[] status7 = 5 -> (power'=link73Power) & (status7'=6) & (packets'= ceil(totalPackets7*df73/100));
[sendData73] status7 = 6 -> (status7'=7);

[done7] status7 = 7 -> (status7'=0);
// receiving part
[sendData117] (queue7 + packets <= MAX_QUEUE) -> (queue7' = queue7 + packets);
[sendData117] (queue7 + packets > MAX_QUEUE) -> (queue7' = MAX_QUEUE);
endmodule
//////////////////////////////////////////////////////////////////
module Mote8
status8:[0..5] init 0;
queue8:[0..MAX_QUEUE] init 0;

[turn8] status8 = 0 -> Mote8TrafficLoadProb:(status8'=1) + 1-Mote8TrafficLoadProb:(status8'=2);

//[] status8 = 1 -> (packets'=queue8 + 10) & (status8'=3);
//[] status8 = 2 -> (packets'=queue8) & (status8'=3);
[] status8 = 1 & queue8 <= MAX_SLOTS-MoteLoad -> (packets'=queue8 + MoteLoad) & (status8'=3) & (queue8'=0);
[] status8 = 1 & queue8 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status8'=3) & (queue8'=queue8-(MAX_SLOTS-MoteLoad));
[] status8 = 2 & queue8 <= MAX_SLOTS -> (packets'=queue8) & (status8'=3) & (queue8'=0);
[] status8 = 2 & queue8 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status8'=3) & (queue8'=queue8-MAX_SLOTS);

[] status8 = 3 -> (power'=link81Power) &(status8'=4);

[sendData81] status8 = 4 -> (status8'=5); 
[done8] status8 = 5 -> (status8'=0);
// receiving part
[sendData208] (queue8 + packets <= MAX_QUEUE) -> (queue8' = queue8 + packets);
[sendData208] (queue8 + packets > MAX_QUEUE) -> (queue8' = MAX_QUEUE);
endmodule
//////////////////////////////////////////////////////////////////

module Mote9
status9:[0..5] init 0;
queue9:[0..MAX_QUEUE] init 0;

[turn9] status9 = 0 -> Mote9TrafficLoadProb:(status9'=1) + 1-Mote9TrafficLoadProb:(status9'=2);

//[] status9 = 1 -> (packets'=queue9 + 10) & (status9'=3);
//[] status9 = 2 -> (packets'=queue9) & (status9'=3);
[] status9 = 1 & queue9 <= MAX_SLOTS-MoteLoad -> (packets'=queue9 + MoteLoad) & (status9'=3) & (queue9'=0);
[] status9 = 1 & queue9 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status9'=3) & (queue9'=queue9-(MAX_SLOTS-MoteLoad));
[] status9 = 2 & queue9 <= MAX_SLOTS -> (packets'=queue9) & (status9'=3) & (queue9'=0);
[] status9 = 2 & queue9 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status9'=3) & (queue9'=queue9-MAX_SLOTS);

[] status9 = 3 -> (power'=link91Power) &(status9'=4);

[sendData91] status9 = 4 -> (status9'=5);
[done9] status9 = 5 -> (status9'=0);
// receiving part
[sendData59] (queue9 + packets <= MAX_QUEUE) -> (queue9' = queue9 + packets);
[sendData59] (queue9 + packets > MAX_QUEUE) -> (queue9' = MAX_QUEUE);
[sendData259] (queue9 + packets <= MAX_QUEUE) -> (queue9' = queue9 + packets);
[sendData259] (queue9 + packets > MAX_QUEUE) -> (queue9' = MAX_QUEUE);

endmodule
//////////////////////////////////////////////////////////////////
module Mote10
status10:[0..7] init 0;
queue10:[0..MAX_QUEUE] init 0;
totalPackets10:[0..40];

[turn10] status10 = 0 -> Mote10TrafficLoadProb:(status10'=1) + 1-Mote10TrafficLoadProb:(status10'=2);

//[] status10 = 1 -> (totalPackets10'=queue10 + 10) & (status10'=3);
//[] status10 = 2 -> (totalPackets10'=queue10) & (status10'=3);
[] status10 = 1 & queue10 <= MAX_SLOTS-MoteLoad -> (totalPackets10'=queue10 + MoteLoad) & (status10'=3) & (queue10'=0);
[] status10 = 1 & queue10 > MAX_SLOTS-MoteLoad -> (totalPackets10'=MAX_SLOTS) & (status10'=3) & (queue10'=queue10-(MAX_SLOTS-MoteLoad));
[] status10 = 2 & queue10 <= MAX_SLOTS -> (totalPackets10'=queue10) & (status10'=3) & (queue10'=0);
[] status10 = 2 & queue10 > MAX_SLOTS -> (totalPackets10'=MAX_SLOTS) & (status10'=3) & (queue10'=queue10-MAX_SLOTS);

[] status10 = 3 -> (power'=link106Power) &(status10'=4) & (packets'= floor(totalPackets10*df106/100));
[sendData106] status10 = 4 -> (status10'=5);

[] status10 = 5 -> (status10'=6) & (power'=link105Power) & (packets'= ceil(totalPackets10*df105/100));
[sendData105] status10 = 6 -> (status10'=7);

[done10] status10 = 7 -> (status10'=0);
// receiving part
[sendData1810] (queue10 + packets <= MAX_QUEUE) -> (queue10' = queue10 + packets);
[sendData1810] (queue10 + packets > MAX_QUEUE) -> (queue10' = MAX_QUEUE);
[sendData1910] (queue10 + packets <= MAX_QUEUE) -> (queue10' = queue10 + packets);
[sendData1910] (queue10 + packets > MAX_QUEUE) -> (queue10' = MAX_QUEUE);
endmodule

////////////////////////////////////////////////////////////////////////////////////////////////
module Mote11
status11:[0..5] init 0;
queue11:[0..MAX_QUEUE] init 0;

[turn11] status11 = 0 -> Mote11TrafficLoadProb:(status11'=1) + 1-Mote11TrafficLoadProb:(status11'=2);

//[] status11 = 1 -> (packets'=queue11 + 10) & (status11'=3);
//[] status11 = 2 -> (packets'=queue11) & (status11'=3);
[] status11 = 1 & queue11 <= MAX_SLOTS-MoteLoad -> (packets'=queue11 + MoteLoad) & (status11'=3) & (queue11'=0);
[] status11 = 1 & queue11 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status11'=3) & (queue11'=queue11-(MAX_SLOTS-MoteLoad));
[] status11 = 2 & queue11 <= MAX_SLOTS -> (packets'=queue11) & (status11'=3) & (queue11'=0);
[] status11 = 2 & queue11 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status11'=3) & (queue11'=queue11-MAX_SLOTS);

[] status11 = 3 -> (power'=link117Power) &(status11'=4);

[sendData117] status11 = 4 -> (status11'=5);
[done11] status11 = 5 -> (status11'=0);
// receiving part
[sendData1311] (queue11 + packets <= MAX_QUEUE) -> (queue11' = queue11 + packets);
[sendData1311] (queue11 + packets > MAX_QUEUE) -> (queue11' = MAX_QUEUE);
endmodule
///////////////////////////////////////////////////////////////////
module Mote12
status12:[0..7] init 0;
queue12:[0..MAX_QUEUE] init 0;
totalPackets12:[0..40];

[turn12] status12 = 0 -> Mote12TrafficLoadProb:(status12'=1) + 1-Mote12TrafficLoadProb:(status12'=2);

//[] status12 = 1 -> (totalPackets12'=queue12 + 10) & (status12'=3);
//[] status12 = 2 -> (totalPackets12'=queue12) & (status12'=3);
[] status12 = 1 & queue12 <= MAX_SLOTS-MoteLoad -> (totalPackets12'=queue12 + MoteLoad) & (status12'=3) & (queue12'=0);
[] status12 = 1 & queue12 > MAX_SLOTS-MoteLoad -> (totalPackets12'=MAX_SLOTS) & (status12'=3) & (queue12'=queue12-(MAX_SLOTS-MoteLoad));
[] status12 = 2 & queue12 <= MAX_SLOTS -> (totalPackets12'=queue12) & (status12'=3) & (queue12'=0);
[] status12 = 2 & queue12 > MAX_SLOTS -> (totalPackets12'=MAX_SLOTS) & (status12'=3) & (queue12'=queue12-MAX_SLOTS);

[] status12 = 3 -> (power'=link127Power) &(status12'=4) & (packets'= floor(totalPackets12*df127/100));
[sendData127] status12 = 4 -> (status12'=5);

[] status12 = 5 -> (status12'=6) & (power'=link123Power) & (packets'= ceil(totalPackets12*df123/100));
[sendData123] status12 = 6 -> (status12'=7);

[done12] status12 = 7 -> (status12'=0);
// receiving part
[sendData1412] (queue12 + packets <= MAX_QUEUE) -> (queue12' = queue12 + packets);
[sendData1412] (queue12 + packets > MAX_QUEUE) -> (queue12' = MAX_QUEUE);
[sendData1512] (queue12 + packets <= MAX_QUEUE) -> (queue12' = queue12 + packets);
[sendData1512] (queue12 + packets > MAX_QUEUE) -> (queue12' = MAX_QUEUE);
endmodule
//////////////////////////////////////////////////////////////////
module Mote13
status13:[0..5] init 0;

[turn13] status13 = 0 -> Mote13TrafficLoadProb:(status13'=1) + 1-Mote13TrafficLoadProb:(status13'=2);

[] status13 = 1 -> (packets'=10) & (status13'=3);
[] status13 = 2 -> (packets'=0) & (status13'=3);
[] status13 = 3 -> (power'=link1311Power) &(status13'=4);

[sendData1311] status13 = 4 -> (status13'=5);
[done13] status13 = 5 -> (status13'=0);

endmodule
//////////////////////////////////////////////////////////////////
module Mote14
status14:[0..5] init 0;

[turn14] status14 = 0 -> Mote14TrafficLoadProb:(status14'=1) + 1-Mote14TrafficLoadProb:(status14'=2);

[] status14 = 1 -> (packets'=10) & (status14'=3);
[] status14 = 2 -> (packets'=0) & (status14'=3);
[] status14 = 3 -> (power'=link1412Power) &(status14'=4);

[sendData1412] status14 = 4 -> (status14'=5);
[done14] status14 = 5 -> (status14'=0);

endmodule
//////////////////////////////////////////////////////////////////
module Mote15
status15:[0..5] init 0;

[turn15] status15 = 0 -> Mote15TrafficLoadProb:(status15'=1) + 1-Mote15TrafficLoadProb:(status15'=2);

[] status15 = 1 -> (packets'=10) & (status15'=3);
[] status15 = 2 -> (packets'=0) & (status15'=3);
[] status15 = 3 -> (power'=link1512Power) &(status15'=4);

[sendData1512] status15 = 4 -> (status15'=5);
[done15] status15 = 5 -> (status15'=0);

endmodule

module Mote16
status16:[0..5] init 0;
queue16:[0..MAX_QUEUE] init 0;

[turn16] status16 = 0 -> Mote16TrafficLoadProb:(status16'=1) + 1-Mote16TrafficLoadProb:(status16'=2);

[] status16 = 1 & queue16 <= MAX_SLOTS-MoteLoad -> (packets'=queue16 + MoteLoad) & (status16'=3) & (queue16'=0);
[] status16 = 1 & queue16 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status16'=3) & (queue16'=queue16-(MAX_SLOTS-MoteLoad));
[] status16 = 2 & queue16 <= MAX_SLOTS -> (packets'=queue16) & (status16'=3) & (queue16'=0);
[] status16 = 2 & queue16 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status16'=3) & (queue16'=queue16-MAX_SLOTS);

[] status16 = 3 -> (power'=link166Power) &(status16'=4);

[sendData166] status16 = 4 -> (status16'=5);
[done16] status16 = 5 -> (status16'=0);
// receiving part
[sendData1716] (queue16 + packets <= MAX_QUEUE) -> (queue16' = queue16 + packets);
[sendData1716] (queue16 + packets > MAX_QUEUE) -> (queue16' = MAX_QUEUE);

endmodule

module Mote17
status17:[0..7] init 0;
totalPackets17:[0..17];

[turn17] status17 = 0 -> Mote17TrafficLoadProb:(status17'=1) + 1-Mote17TrafficLoadProb:(status17'=2);

[] status17 = 1 -> (totalPackets17'=17) & (status17'=3);
[] status17 = 2 -> (totalPackets17'=0) & (status17'=3);
[] status17 = 3 -> (power'=link1716Power) &(status17'=4) & (packets'= floor(totalPackets17*df1716/170));

[sendData1716] status17 = 4 -> (status17'=5);
[] status17 = 5 -> (power'=link1718Power) & (status17'=6) & (packets'= ceil(totalPackets17*df1718/170));
[sendData1718] status17 = 6 -> (status17'=7);
[done17] status17 = 7 -> (status17'=0);

endmodule

module Mote18
status18:[0..5] init 0;
queue18:[0..MAX_QUEUE] init 0;

[turn18] status18 = 0 -> Mote18TrafficLoadProb:(status18'=1) + 1-Mote18TrafficLoadProb:(status18'=2);

[] status18 = 1 & queue18 <= MAX_SLOTS-MoteLoad -> (packets'=queue18 + MoteLoad) & (status18'=3) & (queue18'=0);
[] status18 = 1 & queue18 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status18'=3) & (queue18'=queue18-(MAX_SLOTS-MoteLoad));
[] status18 = 2 & queue18 <= MAX_SLOTS -> (packets'=queue18) & (status18'=3) & (queue18'=0);
[] status18 = 2 & queue18 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status18'=3) & (queue18'=queue18-MAX_SLOTS);

[] status18 = 3 -> (power'=link1810Power) &(status18'=4);

[sendData1810] status18 = 4 -> (status18'=5);
[done18] status18 = 5 -> (status18'=0);
// receiving part
[sendData1718] (queue18 + packets <= MAX_QUEUE) -> (queue18' = queue18 + packets);
[sendData1718] (queue18 + packets > MAX_QUEUE) -> (queue18' = MAX_QUEUE);

endmodule

module Mote19
status19:[0..5] init 0;

[turn19] status19 = 0 -> Mote19TrafficLoadProb:(status19'=1) + 1-Mote19TrafficLoadProb:(status19'=2);

[] status19 = 1 -> (packets'=10) & (status19'=3);
[] status19 = 2 -> (packets'=0) & (status19'=3);
[] status19 = 3 -> (power'=link1910Power) &(status19'=4);

[sendData1910] status19 = 4 -> (status19'=5);
[done19] status19 = 5 -> (status19'=0);

endmodule

module Mote20
status20:[0..5] init 0;
queue20:[0..MAX_QUEUE] init 0;

[turn20] status20 = 0 -> Mote20TrafficLoadProb:(status20'=1) + 1-Mote20TrafficLoadProb:(status20'=2);

[] status20 = 1 & queue20 <= MAX_SLOTS-MoteLoad -> (packets'=queue20 + MoteLoad) & (status20'=3) & (queue20'=0);
[] status20 = 1 & queue20 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status20'=3) & (queue20'=queue20-(MAX_SLOTS-MoteLoad));
[] status20 = 2 & queue20 <= MAX_SLOTS -> (packets'=queue20) & (status20'=3) & (queue20'=0);
[] status20 = 2 & queue20 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status20'=3) & (queue20'=queue20-MAX_SLOTS);

[] status20 = 3 -> (power'=link208Power) &(status20'=4);

[sendData208] status20 = 4 -> (status20'=5);
[done20] status20 = 5 -> (status20'=0);
// receiving part
[sendData2120] (queue20 + packets <= MAX_QUEUE) -> (queue20' = queue20 + packets);
[sendData2120] (queue20 + packets > MAX_QUEUE) -> (queue20' = MAX_QUEUE);

endmodule

module Mote21
status21:[0..5] init 0;
queue21:[0..MAX_QUEUE] init 0;

[turn21] status21 = 0 -> Mote21TrafficLoadProb:(status21'=1) + 1-Mote21TrafficLoadProb:(status21'=2);

[] status21 = 1 & queue21 <= MAX_SLOTS-MoteLoad -> (packets'=queue21 + MoteLoad) & (status21'=3) & (queue21'=0);
[] status21 = 1 & queue21 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status21'=3) & (queue21'=queue21-(MAX_SLOTS-MoteLoad));
[] status21 = 2 & queue21 <= MAX_SLOTS -> (packets'=queue21) & (status21'=3) & (queue21'=0);
[] status21 = 2 & queue21 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status21'=3) & (queue21'=queue21-MAX_SLOTS);

[] status21 = 3 -> (power'=link2120Power) &(status21'=4);

[sendData2120] status21 = 4 -> (status21'=5);
[done21] status21 = 5 -> (status21'=0);
// receiving part
[sendData2321] (queue21 + packets <= MAX_QUEUE) -> (queue21' = queue21 + packets);
[sendData2321] (queue21 + packets > MAX_QUEUE) -> (queue21' = MAX_QUEUE);
[sendData2221] (queue21 + packets <= MAX_QUEUE) -> (queue21' = queue21 + packets);
[sendData2221] (queue21 + packets > MAX_QUEUE) -> (queue21' = MAX_QUEUE);

endmodule

module Mote22
status22:[0..5] init 0;

[turn22] status22 = 0 -> Mote22TrafficLoadProb:(status22'=1) + 1-Mote22TrafficLoadProb:(status22'=2);

[] status22 = 1 -> (packets'=10) & (status22'=3);
[] status22 = 2 -> (packets'=0) & (status22'=3);
[] status22 = 3 -> (power'=link2221Power) &(status22'=4);

[sendData2221] status22 = 4 -> (status22'=5);
[done22] status22 = 5 -> (status22'=0);

endmodule

module Mote23
status23:[0..7] init 0;
totalPackets23:[0..23];

[turn23] status23 = 0 -> Mote23TrafficLoadProb:(status23'=1) + 1-Mote23TrafficLoadProb:(status23'=2);

[] status23 = 1 -> (totalPackets23'=23) & (status23'=3);
[] status23 = 2 -> (totalPackets23'=0) & (status23'=3);
[] status23 = 3 -> (power'=link2324Power) &(status23'=4) & (packets'= floor(totalPackets23*df2324/230));

[sendData2324] status23 = 4 -> (status23'=5);
[] status23 = 5 -> (power'=link2321Power) & (status23'=6) & (packets'= ceil(totalPackets23*df2321/230));
[sendData2321] status23 = 6 -> (status23'=7);
[done23] status23 = 7 -> (status23'=0);

endmodule

module Mote24
status24:[0..5] init 0;
queue24:[0..MAX_QUEUE] init 0;

[turn24] status24 = 0 -> Mote24TrafficLoadProb:(status24'=1) + 1-Mote24TrafficLoadProb:(status24'=2);

[] status24 = 1 & queue24 <= MAX_SLOTS-MoteLoad -> (packets'=queue24 + MoteLoad) & (status24'=3) & (queue24'=0);
[] status24 = 1 & queue24 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status24'=3) & (queue24'=queue24-(MAX_SLOTS-MoteLoad));
[] status24 = 2 & queue24 <= MAX_SLOTS -> (packets'=queue24) & (status24'=3) & (queue24'=0);
[] status24 = 2 & queue24 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status24'=3) & (queue24'=queue24-MAX_SLOTS);

[] status24 = 3 -> (power'=link2425Power) &(status24'=4);

[sendData2425] status24 = 4 -> (status24'=5);
[done24] status24 = 5 -> (status24'=0);
// receiving part
[sendData2324] (queue24 + packets <= MAX_QUEUE) -> (queue24' = queue24 + packets);
[sendData2324] (queue24 + packets > MAX_QUEUE) -> (queue24' = MAX_QUEUE);

endmodule

module Mote25
status25:[0..5] init 0;
queue25:[0..MAX_QUEUE] init 0;

[turn25] status25 = 0 -> Mote25TrafficLoadProb:(status25'=1) + 1-Mote25TrafficLoadProb:(status25'=2);

[] status25 = 1 & queue25 <= MAX_SLOTS-MoteLoad -> (packets'=queue25 + MoteLoad) & (status25'=3) & (queue25'=0);
[] status25 = 1 & queue25 > MAX_SLOTS-MoteLoad -> (packets'=MAX_SLOTS) & (status25'=3) & (queue25'=queue25-(MAX_SLOTS-MoteLoad));
[] status25 = 2 & queue25 <= MAX_SLOTS -> (packets'=queue25) & (status25'=3) & (queue25'=0);
[] status25 = 2 & queue25 > MAX_SLOTS -> (packets'=MAX_SLOTS) & (status25'=3) & (queue25'=queue25-MAX_SLOTS);

[] status25 = 3 -> (power'=link259Power) &(status25'=4);

[sendData259] status25 = 4 -> (status25'=5);
[done25] status25 = 5 -> (status25'=0);
// receiving part
[sendData2425] (queue25 + packets <= MAX_QUEUE) -> (queue25' = queue25 + packets);
[sendData2425] (queue25 + packets > MAX_QUEUE) -> (queue25' = MAX_QUEUE);

endmodule

module Topology
turn:[-1..25] init 0;
serviceInvoked:bool;

[] turn = 0 -> (turn' = 22);
[turn22] turn = 22 & serviceInvoked = false -> (serviceInvoked'=true);
[done22] turn = 22->  (turn'=23) & (serviceInvoked'=false);
[turn23] turn = 23 & serviceInvoked = false -> (serviceInvoked'=true);
[done23] turn = 23->  (turn'=24) & (serviceInvoked'=false);
[turn24] turn = 24 & serviceInvoked = false -> (serviceInvoked'=true);
[done24] turn = 24->  (turn'=25) & (serviceInvoked'=false);
[turn25] turn = 25 & serviceInvoked = false -> (serviceInvoked'=true);
[done25] turn = 25->  (turn'=21) & (serviceInvoked'=false);
[turn21] turn = 21 & serviceInvoked = false -> (serviceInvoked'=true);
[done21] turn = 21->  (turn'=20) & (serviceInvoked'=false);
[turn20] turn = 20 & serviceInvoked = false -> (serviceInvoked'=true);
[done20] turn = 20->  (turn'=8) & (serviceInvoked'=false);
[turn8] turn = 8 & serviceInvoked = false -> (serviceInvoked'=true);
[done8] turn = 8->  (turn'=17) & (serviceInvoked'=false);
[turn17] turn = 17 & serviceInvoked = false -> (serviceInvoked'=true);
[done17] turn = 17 ->  (turn'=18) & (serviceInvoked'=false);
[turn18] turn = 18 & serviceInvoked = false -> (serviceInvoked'=true);
[done18] turn = 18->  (turn'=19) & (serviceInvoked'=false);
[turn19] turn = 19 & serviceInvoked = false -> (serviceInvoked'=true);
[done19] turn = 19->  (turn'=10) & (serviceInvoked'=false);
[turn10] turn = 10 & serviceInvoked = false -> (serviceInvoked'=true);
[done10] turn = 10  ->  (turn'=16) & (serviceInvoked'=false);
[turn16] turn = 16 & serviceInvoked = false -> (serviceInvoked'=true);
[done16] turn = 16->  (turn'=13) & (serviceInvoked'=false);
[turn13] turn = 13 & serviceInvoked = false -> (serviceInvoked'=true);
[done13] turn = 13  ->  (turn'=14) & (serviceInvoked'=false);
[turn14] turn = 14 & serviceInvoked = false -> (serviceInvoked'=true);
[done14] turn = 14  ->  (turn'=15) & (serviceInvoked'=false);
[turn15] turn = 15 & serviceInvoked = false -> (serviceInvoked'=true);
[done15] turn = 15  ->  (turn'=5) & (serviceInvoked'=false);
[turn5] turn = 5 & serviceInvoked = false -> (serviceInvoked'=true);
[done5] turn = 5 ->  (turn'=6) & (serviceInvoked'=false);
[turn6] turn = 6 & serviceInvoked = false -> (serviceInvoked'=true);
[done6] turn = 6 ->  (turn'=11) & (serviceInvoked'=false);
[turn11] turn = 11 & serviceInvoked = false -> (serviceInvoked'=true);
[done11] turn = 11  ->  (turn'=12) & (serviceInvoked'=false);
[turn12] turn = 12 & serviceInvoked = false -> (serviceInvoked'=true);
[done12] turn = 12  ->  (turn'=9) & (serviceInvoked'=false);
[turn9] turn = 9  & serviceInvoked = false -> (serviceInvoked'=true);
[done9] turn = 9  ->  (turn'=7) & (serviceInvoked'=false);
[turn7] turn = 7  & serviceInvoked = false -> (serviceInvoked'=true);
[done7] turn = 7  ->  (turn'=2) & (serviceInvoked'=false);
[turn2] turn = 2  & serviceInvoked = false -> (serviceInvoked'=true);
[done2] turn = 2  ->  (turn'=3) & (serviceInvoked'=false);
[turn3] turn = 3  & serviceInvoked = false -> (serviceInvoked'=true);
[done3] turn = 3  ->  (turn'=4) & (serviceInvoked'=false);
[turn4] turn = 4  & serviceInvoked = false -> (serviceInvoked'=true);
[done4] turn = 4  ->  (turn'=1) & (serviceInvoked'=false);
[turn] turn=1 -> (turn'=-1);
[turnDone] turn=-1 -> (turn'=0);
endmodule
//////////////////////////////////////////////////////////////////

// probability to initiate the load
formula calculateSendingEnergyConsumption = packets * SFTime *
		 (power = 0 ? PCR0 : 
		 (power = 1 ? PCR1 : 
		 (power = 2 ? PCR2 : 
		 (power = 3 ? PCR3 : 
		 (power = 4 ? PCR4 : 
		 (power = 5 ? PCR5 :
		 (power = 6 ? PCR6 :
		 (power = 7 ? PCR7 :
		 (power = 8 ? PCR8 :
		 (power = 9 ? PCR9 :
		 (power = 10 ? PCR10 :
		 (power = 11 ? PCR11 : 
		 (power = 12 ? PCR12 :
		 (power = 13 ? PCR13 :
		 (power = 14 ? PCR14 :
		 PCR15)))))))))))))))/CoulombUnit;
formula calculateReceivingEnergyConsumption = ((15 - 5 -1) * MAX_SLOTS) * receptionTime * receptionCost/CoulombUnit;
/////////////////////////////////////////////////////////////////
rewards "EnergyConsumption"
	[sendData24] true: calculateSendingEnergyConsumption;
	[sendData31] true: calculateSendingEnergyConsumption;
	[sendData41] true: calculateSendingEnergyConsumption;
	[sendData59] true: calculateSendingEnergyConsumption;
	[sendData64] true: calculateSendingEnergyConsumption;
	[sendData72] true: calculateSendingEnergyConsumption;
	[sendData73] true: calculateSendingEnergyConsumption;
	[sendData81] true: calculateSendingEnergyConsumption;
	[sendData91] true: calculateSendingEnergyConsumption;
	[sendData106] true: calculateSendingEnergyConsumption;
	[sendData105] true: calculateSendingEnergyConsumption;
	[sendData117] true: calculateSendingEnergyConsumption;
	[sendData127] true: calculateSendingEnergyConsumption;
	[sendData123] true: calculateSendingEnergyConsumption;
	[sendData1311] true: calculateSendingEnergyConsumption;
	[sendData1412] true: calculateSendingEnergyConsumption;
	[sendData1512] true: calculateSendingEnergyConsumption;
	[sendData166] true: calculateSendingEnergyConsumption;
	[sendData1716] true: calculateSendingEnergyConsumption;
	[sendData1718] true: calculateSendingEnergyConsumption;
	[sendData1810] true: calculateSendingEnergyConsumption;
	[sendData1910] true: calculateSendingEnergyConsumption;
	[sendData208] true: calculateSendingEnergyConsumption;
	[sendData2120] true: calculateSendingEnergyConsumption;
	[sendData2221] true: calculateSendingEnergyConsumption;
	[sendData2324] true: calculateSendingEnergyConsumption;
	[sendData2321] true: calculateSendingEnergyConsumption;
	[sendData2425] true: calculateSendingEnergyConsumption;
	[sendData259] true: calculateSendingEnergyConsumption;

	[turn] true: calculateReceivingEnergyConsumption;
endrewards

//rewards "Packets"
//	[sendData31] true: packets;
//	[sendData41] true: packets;
//	[sendData81] true: packets;
//	[sendData91] true: packets;
//endrewards