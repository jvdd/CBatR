<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Service Configuration

const int MAX_MOTES = 15;
const int MAX_LINKS_PER_MOTE = 2;
const int MAX_LINKS = 17;
typedef int[2, MAX_MOTES] mote_ids;
typedef int[1, MAX_MOTES] d_id;

const int routerId = 1;
int MAX_QUEUE = 60;
int MAX_SLOTS = 40;

typedef struct {
    int source;
    int destination;
    int powerSetting;
    int distribution;
}Link;

typedef struct {
    int moteId;
    int load;
    int energyLevel;
    int parents;
    int queueSize;
    Link links[MAX_LINKS_PER_MOTE];
}Mote;

typedef struct {
    Mote motes[mote_ids];
}ManagedSystem;

typedef struct {
    int packetLoss;
    int energyConsumption;
} Qualities;

typedef struct{
    int source;
    int destination;
    int SNR;
} LinkSNR;

typedef struct{
    int mote;
    int traffic; 
} MoteTraffic;

typedef struct {
    LinkSNR linksSNR[MAX_LINKS];
    MoteTraffic motesTraffic[mote_ids];
} Environment;

const Link EMPTY_LINK={0,0,0,0};
//&lt;Configuration&gt;
ManagedSystem deltaIoT = {{
{2, 10, 11832, 1, 0,{{2, 4, 15, 100}, {0,0,0,0}}},
{3, 10, 11821, 1, 26,{{3, 1, 0, 100}, {0,0,0,0}}},
{4, 10, 11828, 1, 0,{{4, 1, 0, 100}, {0,0,0,0}}},
{5, 10, 11835, 1, 0,{{5, 9, 0, 100}, {0,0,0,0}}},
{6, 10, 11831, 1, 0,{{6, 4, 15, 100}, {0,0,0,0}}},
{7, 10, 11806, 2, 20,{{7, 2, 0, 100}, {7, 3, 1, 0}}},
{8, 10, 11834, 1, 0,{{8, 1, 5, 100}, {0,0,0,0}}},
{9, 10, 11830, 1, 0,{{9, 1, 0, 100}, {0,0,0,0}}},
{10, 10, 11837, 2, 0,{{10, 6, 1, 100}, {10, 5, 15, 0}}},
{11, 10, 11830, 1, 0,{{11, 7, 15, 100}, {0,0,0,0}}},
{12, 10, 11810, 2, 0,{{12, 7, 0, 100}, {12, 3, 15, 0}}},
{13, 10, 11836, 1, 0,{{13, 11, 15, 100}, {0,0,0,0}}},
{14, 10, 11837, 1, 0,{{14, 12, 0, 100}, {0,0,0,0}}},
{15, 10, 11835, 1, 0,{{15, 12, 0, 100}, {0,0,0,0}}}}};

Environment environment = {
{{2, 4, -2},{3, 1, 4},{4, 1, 2},{5, 9, 5},{6, 4, -4},{7, 2, 5},{7, 3, 2},{8, 1, 0},{9, 1, 5},{10, 6, 1},{10, 5, 2},{11, 7, 4},{12, 7, 3},{12, 3, -4},{13, 11, -2},{14, 12, 3},{15, 12, 1}},
{{2, 75},{3, 100},{4, 75},{5, 75},{6, 75},{7, 75},{8, 100},{9, 100},{10, 20},{11, 75},{12, 75},{13, 0},{14, 75},{15, 100}}};
 //&lt;/Configuration&gt;

//&lt;TOPO&gt;
int topology[d_id] = {8,10,13,14,15,5,6,11,12,9,7,2,3,4,1};
//&lt;/Topology&gt;
broadcast chan data[d_id], turn[d_id], done;

double batteryUsage;
int packets, expected;
</declaration>
	<template>
		<name>MoteAutomaton</name>
		<parameter>mote_ids moteId</parameter>
		<declaration>
int parent = 0;
Link link;
int numParents;

int sendQ;
bool hasLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (deltaIoT.motes[moteId].links[i] != EMPTY_LINK){
            return true;
        }
    }
    return false;
}

int calcParentLoad(Link link){
    // if there is no next link then current load should be used for this link
    if (!hasLink())
        return sendQ;
    else
        return sendQ * link.distribution/100;
}

Link selectNextLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (deltaIoT.motes[moteId].links[i] != EMPTY_LINK){
            parent = i;
            return deltaIoT.motes[moteId].links[i];
        }
    }
    return EMPTY_LINK;
}

int getReceiveQueue(){
    int q;
    int SLOTS = sendQ == 0? MAX_SLOTS: MAX_SLOTS-sendQ;

    if (SLOTS &gt;= deltaIoT.motes[moteId].queueSize){
        q = deltaIoT.motes[moteId].queueSize;
        deltaIoT.motes[moteId].queueSize = 0;
    }
    else if (SLOTS &lt; deltaIoT.motes[moteId].queueSize){
        q = SLOTS;
        deltaIoT.motes[moteId].queueSize = deltaIoT.motes[moteId].queueSize - SLOTS;
    }
    return q;
}

int getBuffer(){
    sendQ = deltaIoT.motes[moteId].load;
    return sendQ;
}

void initialize(){

    parent = -1;
    numParents = deltaIoT.motes[moteId].parents;
    sendQ = 0;
}

void receivePackets(int numPackets){
        deltaIoT.motes[moteId].queueSize += numPackets;
    if (deltaIoT.motes[moteId].queueSize &gt; MAX_QUEUE)
        deltaIoT.motes[moteId].queueSize = MAX_QUEUE;
}

void sendPackets(int numPackets){
    sendQ -= numPackets;
}

int pTraffic(int moteId){
    return environment.motesTraffic[moteId].traffic;
}</declaration>
		<location id="id0" x="-144" y="85">
			<name x="-127" y="76">MoteActive</name>
			<committed/>
		</location>
		<location id="id1" x="102" y="85">
			<name x="92" y="51">Turn</name>
			<committed/>
		</location>
		<location id="id2" x="357" y="161">
			<name x="263" y="178">PacketsReceived</name>
			<committed/>
		</location>
		<location id="id3" x="-34" y="-34">
			<name x="-77" y="-161">CalculateLoad</name>
			<committed/>
		</location>
		<location id="id4" x="365" y="-34">
			<urgent/>
		</location>
		<location id="id5" x="161" y="-34">
			<name x="118" y="-161">SendPackets</name>
			<committed/>
		</location>
		<location id="id6" x="-204" y="-34">
			<name x="-221" y="-161">ForEachLink</name>
			<committed/>
		</location>
		<location id="id7" x="255" y="85">
			<name x="245" y="51">Idle</name>
		</location>
		<branchpoint id="id8" x="17" y="85">
		</branchpoint>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<nail x="-204" y="85"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-144" y="153">sendQ=
getBuffer()+getReceiveQueue()</label>
			<label kind="probability" x="-144" y="136">pTraffic(moteId)</label>
			<nail x="17" y="127"/>
			<nail x="-144" y="127"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-144" y="17">sendQ=getReceiveQueue()</label>
			<label kind="probability" x="-144" y="0">100-pTraffic(moteId)</label>
			<nail x="17" y="42"/>
			<nail x="-144" y="42"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="136" y="42">turn[moteId]?</label>
			<label kind="assignment" x="136" y="59">initialize()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id7"/>
			<nail x="357" y="119"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="178" y="119">data[moteId]?</label>
			<label kind="assignment" x="178" y="136">receivePackets(packets)</label>
			<nail x="153" y="119"/>
			<nail x="153" y="161"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="assignment" x="-8" y="-76">packets = 
calcParentLoad(link)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="289" y="59">!hasLink()</label>
			<label kind="synchronisation" x="289" y="42">done!</label>
			<nail x="365" y="85"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="297" y="-136">hasLink()</label>
			<nail x="365" y="-136"/>
			<nail x="-204" y="-136"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="187" y="-76">data[link.destination]!</label>
			<label kind="assignment" x="187" y="-59">sendPackets(packets)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="assignment" x="-178" y="-76">link = 
selectNextLink()</label>
		</transition>
	</template>
	<template>
		<name>Gateway</name>
		<declaration>int periods = 0;
double recvdPackets;
int expectedPackets;
double totalPackets;
void recvPackets(int packets){
    recvdPackets = recvdPackets +  packets;
    expectedPackets += expected;
}
int queuedPackets;
int totalQueuedPackets;
double latency;
double totalLatency;
double avgLatency;

void reset(){
    recvdPackets = 0;
    expectedPackets = 0;
}




int getQueuedPacketsFromAllMotes(){
    int packets;
    for(m: mote_ids){
        packets += deltaIoT.motes[m].queueSize;
    }
    return packets;
}</declaration>
		<location id="id9" x="-102" y="0">
			<name x="-85" y="-8">Turn</name>
			<committed/>
		</location>
		<location id="id10" x="68" y="0">
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-119" y="34">done!</label>
			<label kind="assignment" x="-119" y="51">queuedPackets = getQueuedPacketsFromAllMotes(),
totalPackets = recvdPackets + queuedPackets,
latency = queuedPackets / totalPackets,
totalLatency = totalLatency + latency,
avgLatency = totalLatency/periods,
reset()</label>
			<nail x="-102" y="34"/>
			<nail x="43" y="34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-102" y="-76">turn[routerId]?</label>
			<label kind="assignment" x="-102" y="-59">periods++</label>
			<nail x="43" y="-34"/>
			<nail x="-102" y="-34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="76" y="-76">data[routerId]?</label>
			<label kind="assignment" x="76" y="-59">recvPackets(packets)</label>
			<nail x="93" y="-34"/>
			<nail x="238" y="-34"/>
			<nail x="238" y="34"/>
			<nail x="93" y="34"/>
		</transition>
	</template>
	<template>
		<name>System</name>
		<declaration>clock t;
int mId;
int moteId;

void initialize(){
    mId = 1;
}

bool hasTurn(){
    return mId != MAX_MOTES+1;
}

int nextTurn(){
   return topology[mId++]; 
}</declaration>
		<location id="id11" x="85" y="-34">
			<name x="25" y="-127">MoteDone</name>
			<committed/>
		</location>
		<location id="id12" x="0" y="-34">
		</location>
		<location id="id13" x="-127" y="-34">
			<name x="-161" y="-127">TakeTurn</name>
			<committed/>
		</location>
		<location id="id14" x="-238" y="-34">
			<name x="-263" y="-127">ForEachMote</name>
			<committed/>
		</location>
		<location id="id15" x="-238" y="34">
			<name x="-289" y="51">StartVerification</name>
			<label kind="invariant" x="-289" y="25">t&lt;=1</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="guard" x="0" y="-9">!hasTurn()</label>
			<label kind="assignment" x="0" y="8">t=0</label>
			<nail x="85" y="34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="8" y="-93">hasTurn()</label>
			<nail x="85" y="-102"/>
			<nail x="-238" y="-102"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="25" y="-59">done?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-110" y="-59">turn[moteId]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-221" y="-93">hasTurn()</label>
			<label kind="assignment" x="-221" y="-76">moteId = 
nextTurn()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-229" y="-17">t &gt;=1</label>
			<label kind="assignment" x="-229" y="0">initialize()</label>
		</transition>
	</template>
	<system>system MoteAutomaton, Gateway,System;</system>
	<queries>
		<query>
			<formula>simulate 1[&lt;=30]{Gateway.avgLatency}
			</formula>
			<comment>simulate 1[&lt;=30]{Gateway.avgLatency}
			</comment>
		</query>
	</queries>
</nta>
