<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Service Configuration

const int MAX_MOTES = 6;
const int MAX_LINKS = 2;
typedef int[2, MAX_MOTES] m_id;
typedef int[1, MAX_MOTES] d_id;
const int routerId = 1;
int MAX_QUEUE = 30;
typedef struct {
    int destination;
    int distribution;
    int power;
    int packetLoss;
    int latency;
    int SNR;
    int SF; 
}Link;

typedef struct {
    int moteId;
    int load;
    int battery;
    int numParents;
    int dataProbability;
    int queue;
    Link links[MAX_LINKS];
}Mote;

double	powerConsumptionRate[16]	= { 20.2, 21.2, 22.3, 23.7, 24.7, 26.1, 27.5, 28.8, 30.0,
			31.2, 32.4, 33.7, 35.1, 36.5, 38.0, 38.9 };

typedef int [7, 12]SFRange;
double SFTimes[SFRange] = {0.128, 0.258, 0.458, 0.858, 1.158, 1.58};
const double CoulombUnit = 1000.0;
const int receptionTime = 4;
const double receptionCost = 14.2;

typedef struct {
//    int power;
//    int packetLoss;
    Mote motes[m_id];
}LoRA;

const Link EMPTY_LINK = {0,0,0,0,0,0,0};
//&lt;LORA&gt;
LoRA loRA ={{
//{2, 10, 11621, 1, 50,0,{{4, 100, 15, 10, 0, -2, 11},EMPTY_LINK}},
//{3, 10, 11592, 1, 100,0,{{1, 100, 0, 0, 0, 4, 11},EMPTY_LINK}},
{2, 10, 11629, 1, 100,0,{{1, 100, 15, 10, 0, 2, 11},EMPTY_LINK}},
{3, 10, 11659, 1, 100,0,{{1, 100, 15, 10, 0, 4, 11},EMPTY_LINK}},
{4, 10, 11648, 1, 80,0,{{2, 100, 15, 10, 0, -3, 11},EMPTY_LINK}},
//{7, 10, 11607, 2, 50,0,{{2, 100, 0, 0, 0, 5, 11},{3, 0, 0, 0, 0, 2, 11}}},
//{8, 10, 11838, 1, 100,0,{{1, 100, 15, 0, 0, 0, 11},EMPTY_LINK}},
{5, 10, 11637, 1, 100,0,{{3, 100, 15, 10, 0, 5, 11},EMPTY_LINK}},
{6, 10, 11878, 2, 80,0,{{5, 50, 15, 10, 0, 1, 11},{4, 50, 15, 0, 0, 2, 11}}}
//{11, 10, 11640, 1, 50,0,{{7, 100, 15, 0, 0, 3, 11},EMPTY_LINK}},
//{12, 10, 11616, 2, 50,0,{{7, 100, 0, 0, 0, 2, 11},{3, 0, 15, 17, 0, -3, 11}}},
//{13, 10, 11874, 1, 40,0,{{11, 100, 15, 12, 0, -2, 11},EMPTY_LINK}},
//{14, 10, 11868, 1, 50,0,{{12, 100, 0, 0, 0, 2, 11},EMPTY_LINK}},
//{15, 10, 11857, 1, 100,0,{{12, 100, 0, 0, 0, 1, 11},EMPTY_LINK}}
}};
//&lt;/LORA&gt;

//&lt;TOPO&gt;
int topology[d_id] = {6,5,4,3,2,1};//{8,10,13,14,15,5,6,11,12,9,7,2,3,4,1};
//&lt;/Topology&gt;
broadcast chan data[d_id], turn[d_id], done;

double batteryUsage;
int packets, expected;
</declaration>
	<template>
		<name>MoteAutomaton</name>
		<parameter>m_id moteId</parameter>
		<declaration>//clock t;
int parent = 0;
//double receivedData;
Link link;
int numParents;
int queue;
int totalPackets;
//int expectedLoad;
bool hasLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (loRA.motes[moteId].links[i] != EMPTY_LINK){
            return true;
        }
    }
    return false;
}

/*
int calcExpectedLoad(Link link){
    if (!hasLink())
        return expectedLoad;
    else
        return expectedLoad * link.distribution/100;
}
*/
int calcActualLoad(Link link){
    //expected = calcExpectedLoad(link);
    // if there is no next link then current load should be used for this link
    if (!hasLink())
        return totalPackets;
    else
        return totalPackets * link.distribution/100;
}

Link selectNextLink(){
    int i;
    for(i = parent+1; i &lt; numParents; i++){
        if (loRA.motes[moteId].links[i] != EMPTY_LINK){
            parent = i;
            return loRA.motes[moteId].links[i];
        }
    }
    return EMPTY_LINK;
}

int getQueuePackets(){
    return queue;
}

int getDevicePackets(){
    return loRA.motes[moteId].load;
}

void initialize(){
    //queue += loRA.motes[moteId].load;
    parent = -1;
    numParents = loRA.motes[moteId].numParents;
    //expectedLoad += getDevicePackets();// + getQueuePackets();
}

void calcRecvEnergy(int numPackets){
    // batteryUsage = batteryUsage + (numPackets * receptionTime * (receptionCost/CoulombUnit));
}

void calcSendEnergy(int numPackets){
     batteryUsage = batteryUsage + (numPackets * (SFTimes[link.SF] * (powerConsumptionRate[link.power] / CoulombUnit)));
}


void receivePackets(int numPackets){
    if (queue &lt; MAX_QUEUE)
    queue += numPackets;
    //expectedLoad += expected;
}

void removePackets(int numPackets){
    totalPackets -= numPackets;
    //expectedLoad -= expected;
}

int getMoteActivationPr(){
    return loRA.motes[moteId].dataProbability;
}</declaration>
		<location id="id0" x="-144" y="85">
			<name x="-127" y="76">MoteActive</name>
			<committed/>
		</location>
		<location id="id1" x="102" y="85">
			<name x="92" y="51">Turn</name>
			<committed/>
		</location>
		<location id="id2" x="357" y="161">
			<name x="263" y="178">PacketsReceived</name>
			<committed/>
		</location>
		<location id="id3" x="-68" y="-34">
			<name x="-111" y="-161">CalculateLoad</name>
			<committed/>
		</location>
		<location id="id4" x="365" y="-34">
			<name x="212" y="-161">SendEnergyCaclculated</name>
			<urgent/>
		</location>
		<location id="id5" x="102" y="-34">
			<name x="59" y="-161">SendPackets</name>
			<committed/>
		</location>
		<location id="id6" x="-204" y="-34">
			<name x="-221" y="-161">ForEachLink</name>
			<committed/>
		</location>
		<location id="id7" x="255" y="85">
			<name x="245" y="51">Idle</name>
		</location>
		<branchpoint id="id8" x="17" y="85">
		</branchpoint>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<nail x="-204" y="85"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-144" y="153">totalPackets=
getDevicePackets()+getQueuePackets()</label>
			<label kind="probability" x="-144" y="136">getMoteActivationPr()</label>
			<nail x="17" y="127"/>
			<nail x="-144" y="127"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id0"/>
			<label kind="assignment" x="-144" y="17">totalPackets = getQueuePackets()</label>
			<label kind="probability" x="-144" y="0">100-getMoteActivationPr()</label>
			<nail x="17" y="42"/>
			<nail x="-144" y="42"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="136" y="42">turn[moteId]?</label>
			<label kind="assignment" x="136" y="59">initialize()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id7"/>
			<nail x="357" y="119"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="178" y="119">data[moteId]?</label>
			<label kind="assignment" x="178" y="136">receivePackets(packets)</label>
			<nail x="153" y="119"/>
			<nail x="153" y="161"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="assignment" x="-59" y="-76">packets = 
calcActualLoad(link)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="280" y="42">!hasLink()</label>
			<label kind="synchronisation" x="280" y="25">done!</label>
			<label kind="assignment" x="280" y="59">queue = 0</label>
			<nail x="365" y="85"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="297" y="-136">hasLink()</label>
			<nail x="365" y="-136"/>
			<nail x="-204" y="-136"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="144" y="-93">data[link.destination]!</label>
			<label kind="assignment" x="144" y="-76">removePackets(packets),
calcSendEnergy(packets)</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="assignment" x="-195" y="-76">link = 
selectNextLink()</label>
		</transition>
	</template>
	<template>
		<name>Gateway</name>
		<declaration>int periods = 0;
int numPackets;
int expectedPackets;
double avgEnergyConsumption, totalEnergy;

double getSendEnergy(){
    return batteryUsage;// + 140-numPackets * receptionTime * (receptionCost/CoulombUnit);
}

double getTimeSlotsEnergy(){
    return (((4) * MAX_QUEUE) * receptionTime * receptionCost)/CoulombUnit; // 40 is time slots here, 5 leaf motes + 1 gateway
}

double getMotesEnergyConsumption(){
    return getSendEnergy()+getTimeSlotsEnergy();
}

void recvPackets(int packets){
    numPackets += packets;
    expectedPackets += expected;
}

void reset(){
    numPackets = 0;
    expectedPackets = 0;
    batteryUsage = 0;
}</declaration>
		<location id="id9" x="-102" y="0">
			<name x="-85" y="-8">Turn</name>
			<committed/>
		</location>
		<location id="id10" x="26" y="0">
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-119" y="34">done!</label>
			<label kind="assignment" x="-119" y="51">totalEnergy = totalEnergy +
                    getMotesEnergyConsumption(),
avgEnergyConsumption=totalEnergy/periods,
reset()</label>
			<nail x="-102" y="34"/>
			<nail x="1" y="34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-102" y="-76">turn[routerId]?</label>
			<label kind="assignment" x="-102" y="-59">periods++</label>
			<nail x="1" y="-34"/>
			<nail x="-102" y="-34"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="34" y="-76">data[routerId]?</label>
			<label kind="assignment" x="34" y="-59">recvPackets(packets)</label>
			<nail x="51" y="-34"/>
			<nail x="161" y="-34"/>
			<nail x="161" y="34"/>
			<nail x="51" y="34"/>
		</transition>
	</template>
	<template>
		<name>Topology</name>
		<declaration>clock t;
int mId;
int moteId;

void initialize(){
    mId = 1;
}

bool hasTurn(){
    return mId != MAX_MOTES+1;
}

int nextTurn(){
   return topology[mId++]; 
}</declaration>
		<location id="id11" x="85" y="-34">
			<name x="25" y="-127">MoteDone</name>
			<committed/>
		</location>
		<location id="id12" x="0" y="-34">
		</location>
		<location id="id13" x="-127" y="-34">
			<name x="-161" y="-127">TakeTurn</name>
			<committed/>
		</location>
		<location id="id14" x="-238" y="-34">
			<name x="-263" y="-127">ForEachMote</name>
			<committed/>
		</location>
		<location id="id15" x="-238" y="34">
			<label kind="invariant" x="-255" y="51">t&lt;=1</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="guard" x="0" y="-9">!hasTurn()</label>
			<label kind="assignment" x="0" y="8">t=0</label>
			<nail x="85" y="34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="8" y="-93">hasTurn()</label>
			<nail x="85" y="-102"/>
			<nail x="-238" y="-102"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="25" y="-59">done?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-110" y="-59">turn[moteId]!</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-221" y="-93">hasTurn()</label>
			<label kind="assignment" x="-221" y="-76">moteId = 
nextTurn()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-229" y="-17">t &gt;=1</label>
			<label kind="assignment" x="-229" y="0">initialize()</label>
		</transition>
	</template>
	<system>system MoteAutomaton, Gateway,Topology;</system>
	<queries>
		<query>
			<formula>simulate 1[&lt;=30]{Gateway.avgEnergyConsumption}
			</formula>
			<comment>simulate 1[&lt;=30]{Gateway.avgEnergyConsumption}
			</comment>
		</query>
	</queries>
</nta>
